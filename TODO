Data.Trie.BitTwiddle:
* Do benchmarking to see whether the Word8 instances are not worse than Int instances. If the same or Int is better, switch them up and use Int for the bit twiddling. This will require access to other architectures for debugging
** If Int is better/as-good, see about maybe getting Data.IntMap to switch to using a module like ours and exporting it from base. This would introduce a dependency on a particular base version, but reuse is good.


Data.Trie.ByteStringInternal:
* Write quickcheck law for breakMaximalPrefix
* Debug the C version of indexOfDifference
** Write a smart constructor for ByteStrings to ensure good alignment
** Write debugging suite for cross-platform checking


Data.Trie.Convenience:
* Try to find a single best implementation of fromList instead of all these variants. Some kind of amortized approximation to sorting which lets us be lazier?
* fromListWith, fromListWithKey?
* insertLookupWithKey, updateLookupWithKey (by some sort of Applicative or State transform? is there a more efficient way without re-engineering the core code?)
* elems function like keys? Move keys here from Data.Trie?
* filter (using filterMap), filterWithKey (using mapBy)
* partition, partitionWithKey, mapEither[WithKey] ?
* split, splitLookup ??
* min and max stuff so we can treat Trie like a priority queue too??


Data.Trie.Internal:
* Provide direct implementations of foldl and foldr.
** Benchmark against the default from foldMap.
* Accumulating mapping functions?
* Efficient difference and intersection


Other:
* Reconsider a version of Trie that uses natural word size everywhere. Simplest way to maintain invariants is probably to have multiple values stored in each arc (one for each byte). But there might be some other way to do it...

* Get real complexity numbers for the main three functions.
